
Line_following.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e9  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000764  00000000  00000000  00000cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e7  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001940  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000460  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cc  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>


int main()
{
	configure_motors();
  80:	0e 94 6a 00 	call	0xd4	; 0xd4 <configure_motors>
	configure_reflectance_sensors();
  84:	0e 94 b8 00 	call	0x170	; 0x170 <configure_reflectance_sensors>
	
	while(1){
		configure_reflectance_sensors();
  88:	0e 94 b8 00 	call	0x170	; 0x170 <configure_reflectance_sensors>
		
		if (read_reflectance_sensors() > 16) {
  8c:	0e 94 c1 00 	call	0x182	; 0x182 <read_reflectance_sensors>
  90:	81 31       	cpi	r24, 0x11	; 17
  92:	38 f0       	brcs	.+14     	; 0xa2 <main+0x22>
			pwm_right_motor(5);
  94:	85 e0       	ldi	r24, 0x05	; 5
  96:	0e 94 9a 00 	call	0x134	; 0x134 <pwm_right_motor>
			pwm_left_motor(35);
  9a:	83 e2       	ldi	r24, 0x23	; 35
  9c:	0e 94 7c 00 	call	0xf8	; 0xf8 <pwm_left_motor>
  a0:	f3 cf       	rjmp	.-26     	; 0x88 <main+0x8>
		} else if (read_reflectance_sensors()<2){
  a2:	0e 94 c1 00 	call	0x182	; 0x182 <read_reflectance_sensors>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	38 f4       	brcc	.+14     	; 0xb8 <main+0x38>
			pwm_right_motor(35);
  aa:	83 e2       	ldi	r24, 0x23	; 35
  ac:	0e 94 9a 00 	call	0x134	; 0x134 <pwm_right_motor>
			pwm_left_motor(5);
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	0e 94 7c 00 	call	0xf8	; 0xf8 <pwm_left_motor>
  b6:	e8 cf       	rjmp	.-48     	; 0x88 <main+0x8>
		} else {
			pwm_right_motor(25);
  b8:	89 e1       	ldi	r24, 0x19	; 25
  ba:	0e 94 9a 00 	call	0x134	; 0x134 <pwm_right_motor>
			pwm_left_motor(25);
  be:	89 e1       	ldi	r24, 0x19	; 25
  c0:	0e 94 7c 00 	call	0xf8	; 0xf8 <pwm_left_motor>
  c4:	e1 cf       	rjmp	.-62     	; 0x88 <main+0x8>

000000c6 <configure_left_motor>:
#include<avr/io.h>

void configure_left_motor(){
	DDRD|=(1<<5)|(1<<6);
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	80 66       	ori	r24, 0x60	; 96
  ca:	8a b9       	out	0x0a, r24	; 10
  cc:	08 95       	ret

000000ce <configure_right_motor>:
}

void configure_right_motor(){
	DDRB|=(1<<3);
  ce:	23 9a       	sbi	0x04, 3	; 4
	DDRD|=(1<<3);
  d0:	53 9a       	sbi	0x0a, 3	; 10
  d2:	08 95       	ret

000000d4 <configure_motors>:
}

void configure_motors(){
	configure_left_motor();
  d4:	0e 94 63 00 	call	0xc6	; 0xc6 <configure_left_motor>
	configure_right_motor();
  d8:	0e 94 67 00 	call	0xce	; 0xce <configure_right_motor>
  dc:	08 95       	ret

000000de <left_motor_on>:
}

void left_motor_on(){
	PORTD|=(1<<3);
  de:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD&=~(1<<3);
  e0:	5b 98       	cbi	0x0b, 3	; 11
  e2:	08 95       	ret

000000e4 <brake_left_motor>:
}

void brake_left_motor(){
	PORTD|=(1<<5)|(1<<6);
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	80 66       	ori	r24, 0x60	; 96
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	08 95       	ret

000000ec <right_motor_on>:
}

void right_motor_on(){
	PORTB|=(1<<3);
  ec:	2b 9a       	sbi	0x05, 3	; 5
	PORTD&=~(1<<3);
  ee:	5b 98       	cbi	0x0b, 3	; 11
  f0:	08 95       	ret

000000f2 <brake_right_motor>:
}

void brake_right_motor(){
	PORTB|=(1<<3);
  f2:	2b 9a       	sbi	0x05, 3	; 5
	PORTD|=(1<<3);
  f4:	5b 9a       	sbi	0x0b, 3	; 11
  f6:	08 95       	ret

000000f8 <pwm_left_motor>:
}

void pwm_left_motor(uint8_t duty_cycle){
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	d8 2f       	mov	r29, r24
	uint8_t counter = 0;
  fe:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t state = 0;
	
	while(counter<99){
		switch(state){
			case 0:
			if(counter < duty_cycle){
 100:	cd 17       	cp	r28, r29
 102:	18 f4       	brcc	.+6      	; 0x10a <pwm_left_motor+0x12>
				left_motor_on();
 104:	0e 94 6f 00 	call	0xde	; 0xde <left_motor_on>
				state = 0;
				break;
 108:	0f c0       	rjmp	.+30     	; 0x128 <pwm_left_motor+0x30>
			} else {
				brake_left_motor();
 10a:	0e 94 72 00 	call	0xe4	; 0xe4 <brake_left_motor>
				state = 1;
				break;
 10e:	08 c0       	rjmp	.+16     	; 0x120 <pwm_left_motor+0x28>
			}
			
			case 1:
			if(counter >= duty_cycle){
 110:	cd 17       	cp	r28, r29
 112:	18 f0       	brcs	.+6      	; 0x11a <pwm_left_motor+0x22>
				brake_left_motor();
 114:	0e 94 72 00 	call	0xe4	; 0xe4 <brake_left_motor>
				state = 1;
				break;
 118:	03 c0       	rjmp	.+6      	; 0x120 <pwm_left_motor+0x28>
			} else {
				left_motor_on();
 11a:	0e 94 6f 00 	call	0xde	; 0xde <left_motor_on>
				state = 0;
				break;
 11e:	04 c0       	rjmp	.+8      	; 0x128 <pwm_left_motor+0x30>
				brake_left_motor();
				state = 1;
				break;
		}
		
		counter++;
 120:	cf 5f       	subi	r28, 0xFF	; 255

void pwm_left_motor(uint8_t duty_cycle){
	uint8_t counter = 0;
	uint8_t state = 0;
	
	while(counter<99){
 122:	c3 36       	cpi	r28, 0x63	; 99
 124:	20 f4       	brcc	.+8      	; 0x12e <pwm_left_motor+0x36>
 126:	f4 cf       	rjmp	.-24     	; 0x110 <pwm_left_motor+0x18>
				brake_left_motor();
				state = 1;
				break;
		}
		
		counter++;
 128:	cf 5f       	subi	r28, 0xFF	; 255

void pwm_left_motor(uint8_t duty_cycle){
	uint8_t counter = 0;
	uint8_t state = 0;
	
	while(counter<99){
 12a:	c3 36       	cpi	r28, 0x63	; 99
 12c:	48 f3       	brcs	.-46     	; 0x100 <pwm_left_motor+0x8>
		}
		
		counter++;
	}
	
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <pwm_right_motor>:

void pwm_right_motor(uint8_t duty_cycle){
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	d8 2f       	mov	r29, r24
	uint8_t counter = 0;
 13a:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t state = 0;
	
	while(counter<99){
		switch(state){
			case 0:
			if(counter < duty_cycle){
 13c:	cd 17       	cp	r28, r29
 13e:	18 f4       	brcc	.+6      	; 0x146 <pwm_right_motor+0x12>
				right_motor_on();
 140:	0e 94 76 00 	call	0xec	; 0xec <right_motor_on>
				state = 0;
				break;
 144:	0f c0       	rjmp	.+30     	; 0x164 <pwm_right_motor+0x30>
			} else {
				brake_right_motor();
 146:	0e 94 79 00 	call	0xf2	; 0xf2 <brake_right_motor>
				state = 1;
				break;
 14a:	08 c0       	rjmp	.+16     	; 0x15c <pwm_right_motor+0x28>
			}
			
			case 1:
			if(counter >= duty_cycle){
 14c:	cd 17       	cp	r28, r29
 14e:	18 f0       	brcs	.+6      	; 0x156 <pwm_right_motor+0x22>
				brake_right_motor();
 150:	0e 94 79 00 	call	0xf2	; 0xf2 <brake_right_motor>
				state = 1;
				break;
 154:	03 c0       	rjmp	.+6      	; 0x15c <pwm_right_motor+0x28>
			} else {
				right_motor_on();
 156:	0e 94 76 00 	call	0xec	; 0xec <right_motor_on>
				state = 0;
				break;
 15a:	04 c0       	rjmp	.+8      	; 0x164 <pwm_right_motor+0x30>
			brake_right_motor();
			state = 1;
			break;
		}
		
		counter++;
 15c:	cf 5f       	subi	r28, 0xFF	; 255

void pwm_right_motor(uint8_t duty_cycle){
	uint8_t counter = 0;
	uint8_t state = 0;
	
	while(counter<99){
 15e:	c3 36       	cpi	r28, 0x63	; 99
 160:	20 f4       	brcc	.+8      	; 0x16a <pwm_right_motor+0x36>
 162:	f4 cf       	rjmp	.-24     	; 0x14c <pwm_right_motor+0x18>
			brake_right_motor();
			state = 1;
			break;
		}
		
		counter++;
 164:	cf 5f       	subi	r28, 0xFF	; 255

void pwm_right_motor(uint8_t duty_cycle){
	uint8_t counter = 0;
	uint8_t state = 0;
	
	while(counter<99){
 166:	c3 36       	cpi	r28, 0x63	; 99
 168:	48 f3       	brcs	.-46     	; 0x13c <pwm_right_motor+0x8>
		}
		
		counter++;
	}
	
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <configure_reflectance_sensors>:
#include <avr/io.h>

void configure_reflectance_sensors(){
	DDRC|=(1<<5);
 170:	3d 9a       	sbi	0x07, 5	; 7
	PORTC|=(1<<5);
 172:	45 9a       	sbi	0x08, 5	; 8
	//pullup resistors
	DDRC&=~((1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0));
 174:	87 b1       	in	r24, 0x07	; 7
 176:	80 7e       	andi	r24, 0xE0	; 224
 178:	87 b9       	out	0x07, r24	; 7
	PORTC|=((1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0));
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	8f 61       	ori	r24, 0x1F	; 31
 17e:	88 b9       	out	0x08, r24	; 8
 180:	08 95       	ret

00000182 <read_reflectance_sensors>:
}

uint8_t read_reflectance_sensors(){
	uint8_t sensors=0;
	
	if(PINC=(1<<4))
 182:	80 e1       	ldi	r24, 0x10	; 16
 184:	86 b9       	out	0x06, r24	; 6
	sensors+=16;
	if(PINC=(1<<3))
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	86 b9       	out	0x06, r24	; 6
	sensors+=8;
	if(PINC=(1<<2))
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	86 b9       	out	0x06, r24	; 6
	sensors+=4;
	if(PINC=(1<<1))
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	86 b9       	out	0x06, r24	; 6
	sensors+=2;
	if(PINC=(1<<0))
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	86 b9       	out	0x06, r24	; 6
	sensors+=1;

	return sensors;
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
